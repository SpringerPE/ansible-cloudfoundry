[cf:children]
test

[test:children]
# You can add here more CF environments, they are just names!
# and for each enviroment you can override the variables
# defined in `group_vars/cf.yml` by creating a new file
# with the same name. The manifest `group_vars/cf.yml` it will be 
# applied as a default variables (for example for feature flags,
# environment variables, etc) for all children like this one,
# and then by having a file with the same name as the children
# (`group_vars/test.yml` in this example) overwrite the variable
# `cf_orgs` and define specific organizations for this CF.
#
# Also, it is possible to define other enviroments to apply
# exactly the same settings. For example (see below the second 
# part) to one CF enviroment running in GCP:
#api.google
#
test.cf


[test.cf]
api.test.cf.springer.com

[test.cf:vars]
cf_admin_user=pepe
cf_admin_password="password"
cf_api="https://api.test.cf.springer.com"


# Following the example about how to apply the same
# resources definition in `group_vars/test.yml` to a 
# different CF:
#
#[test.google]
#api.google.cf.springer.com
#
#[test.google:vars]
#cf_admin_user=admin
#cf_admin_password="password"
#cf_api="https://api.test.google.springer-sbm.com"


[client]
# Client is where the actions will be executed, it points to
# localhost, but it could point to a different host to perform
# actions from there
localhost ansible_connection=local ansible_become=false
